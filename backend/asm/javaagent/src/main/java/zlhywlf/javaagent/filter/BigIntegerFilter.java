package zlhywlf.javaagent.filter;

import jdk.internal.org.objectweb.asm.tree.InsnList;
import jdk.internal.org.objectweb.asm.tree.InsnNode;
import jdk.internal.org.objectweb.asm.tree.JumpInsnNode;
import jdk.internal.org.objectweb.asm.tree.LabelNode;
import jdk.internal.org.objectweb.asm.tree.MethodInsnNode;
import jdk.internal.org.objectweb.asm.tree.MethodNode;
import jdk.internal.org.objectweb.asm.tree.VarInsnNode;

import static jdk.internal.org.objectweb.asm.Opcodes.*;

import java.math.BigInteger;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

public class BigIntegerFilter extends Filter {

    public BigIntegerFilter() {
        super("java/math/BigInteger");
    }

    @Override
    public void accept(MethodNode arg0) {
        if ("oddModPow".equals(arg0.name)
                && "(Ljava/math/BigInteger;Ljava/math/BigInteger;)Ljava/math/BigInteger;".equals(arg0.desc)) {
            InsnList list = new InsnList();
            list.add(new VarInsnNode(ALOAD, 0));
            list.add(new VarInsnNode(ALOAD, 1));
            list.add(new VarInsnNode(ALOAD, 2));
            list.add(new MethodInsnNode(INVOKESTATIC, "zlhywlf/javaagent/filter/BigIntegerFilter", "doFilter",
                    "(Ljava/math/BigInteger;Ljava/math/BigInteger;Ljava/math/BigInteger;)Ljava/math/BigInteger;",
                    false));
            list.add(new VarInsnNode(ASTORE, 3));
            list.add(new VarInsnNode(ALOAD, 3));
            LabelNode label = new LabelNode();
            list.add(new JumpInsnNode(IFNULL, label));
            list.add(new VarInsnNode(ALOAD, 3));
            list.add(new InsnNode(ARETURN));
            list.add(label);
            arg0.instructions.insert(list);
        }
    }

    private static final String KEY = "577903842360649433610590601823264436101677773244633775312891688322546712113959712168777268013552177840901314644711018163324513755684493248365687157488035067473920019030585555528383280326426725184012420679622797741186473909191300224538190612798362931343900057106732005928858805257685178426777917566150754063089032365736697979631127755606656608919040404535988418876104598149449955002434541489304225011929070357333421153969481600925702780556774975456282318447975836735263214219885496227057376395076597476131217110881701616257566026859074882986108844755942760721637050785751035393898091054051324320962893084425630581749402371142110283740834523979611339460664488709186857487234243758460209325451069309761188545600159059280888816696403047215936162132955870890243436179573133855959754273443907220310051625201467809924111879071325215112440825152507241993574247496620662877748354531633503935131886111314963666854049161406516644450866882556533992394088539829950139600740754091000562001964540644616533279471355749794270038889930689345129090686666791399458315744669742290413940351829840295663251856765875863656472643425694182675468420212760992669329735752538363425976704824279800341505869427739889401231061541788424335028632445042846985595936113,65537,860106576952879101192782278876319243486072481962999610484027161162448933268423045647258145695082284265933019120714643752088997312766689988016808929265129401027490891810902278465065056686129972085119605237470899952751915070244375173428976413406363879128531449407795115913715863867259163957682164040613505040314747660800424242248055421184038777878268502955477482203711835548014501087778959157112423823275878824729132393281517778742463067583320091009916141454657614089600126948087954465055321987012989937065785013284988096504657892738536613208311013047138019418152103262155848541574327484510025594166239784429845180875774012229784878903603491426732347994359380330103328705981064044872334790365894924494923595382470094461546336020961505275530597716457288511366082299255537762891238136381924520749228412559219346777184174219999640906007205260040707839706131662149325151230558316068068139406816080119906833578907759960298749494098180107991752250725928647349597506532778539709852254478061194098069801549845163358315116260915270480057699929968468068015735162890213859113563672040630687357054902747438421559817252127187138838514773245413540030800888215961904267348727206110582505606182944023582459006406137831940959195566364811905585377246353";
    private static final String VALUE = "31872219281407242025505148642475109331663948030010491344733687844358944945421064967310388547820970408352359213697487269225694990179009814674781374751323403257628081559561462351695605167675284372388551941279783515209238245831229026662363729380633136520288327292047232179909791526492877475417113579821717193807584807644097527647305469671333646868883650312280989663788656507661713409911267085806708237966730821529702498972114194166091819277582149433578383639532136271637219758962252614390071122773223025154710411681628917523557526099053858210363406122853294409830276270946292893988830514538950951686480580886602618927728470029090747400687617046511462665469446846624685614084264191213318074804549715573780408305977947238915527798680393538207482620648181504876534152430149355791756374642327623133843473947861771150672096834149014464956451480803326284417202116346454345929350148770746553056995922154382822307758515805142704373984019252210715650875853634697920708113806880196144197384637328982263167395073688501517286678083973976140696077590122053014085412828620051470085033364773099146103525313018873319293728800442101520384088109603555959893639842091339193865343010327692455635045600087494244131692852209296838012277185271311262848903";
    private static final Map<String, BigInteger> cache = new ConcurrentHashMap<>();

    public static BigInteger doFilter(BigInteger x, BigInteger y, BigInteger z) {
        String key = String.format("%s,%s,%s", x, y, z);
        if (KEY.equals(key)) {
            return cache.computeIfAbsent(key, k -> new BigInteger(VALUE));
        }
        return null;
    }

}
